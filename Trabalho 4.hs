-- Andr√© Pacheco dos Santos

-- 1. Escreva uma fun√ß√£o chamada fatorialn que usando o operador range e a fun√ß√£o foldr devolva o fatorial de n.
fatorialn :: Integer -> Integer
fatorialn x
  | x <= 1 = 1
  | otherwise = foldl (*) 1 [x, x-1..1]

-- 2. Usando a fun√ß√£o map escreva uma fun√ß√£o, chamada quadradoReal que recebe uma lista de n√∫meros reais, positivos e negativos e devolva uma lista com o quadrado de cada um dos reais listados
quadradoReal :: [Integer] -> [Integer]
quadradoReal x = map (^ 2) x

-- 3. Usando a fun√ß√£o map escreva uma fun√ß√£o, comprimentoPalavras que recebe uma lista de palavras e devolve uma lista com o comprimento de cada uma destas palavras.
comprimentoPalavras :: [String] -> [Int]
comprimentoPalavras x = map (length) x

-- 4. Usando a fun√ß√£o filter escreva uma fun√ß√£o, chamada maiorMultiploDe29 devolva o maior n√∫mero entre 0 e 100000 que seja divisivel por 29.
aoContrario :: [Integer] -> [Integer]
aoContrario [] = []
aoContrario (x:xs) = aoContrario xs ++ [x]

maiorMultiploDe29 :: Integer
maiorMultiploDe29 = head (filter p (aoContrario [0..100000]))
  where p x = x `mod` 29 == 0

-- 5. Usando a fun√ß√£o filter escreva uma fun√ß√£o, chamada maiorMultiploDe que recebe um inteiro e devolva o maior n√∫mero entre 0 e 100000 que seja divisivel por este inteiro.
maiorMultiploDe :: Integer -> Integer
maiorMultiploDe x = head (filter p (aoContrario [0..100000]))
  where p y = y `mod` x == 0

-- 6. Usando Haskell e a fun√ß√£o foldr defina uma fun√ß√£o, chamada somaQuadrados que devolva a soma dos quadrados dos itens de uma lista de n√∫meros naturais de comprimento n. De tal forma que: ùë†ùëúùëöùëéùëÑùë¢ùëéùëëùëüùëéùëëùëúùë† = 1^2 + 2^2 + 3^2 + 4^2 . . . +ùëõ^2.
somaQuadrados :: Integer -> Integer
somaQuadrados x = foldr ((+) . (^ 2)) 0 [1..x]

-- 7. Usando Haskell e a fun√ß√£o foldl defina uma fun√ß√£o, chamada comprimento, que devolva o comprimento (cardinalidade) de uma lista dada.
comprimento :: [Integer] -> Integer
comprimento lista = foldl (\contador _ -> contador+1) 0 lista

-- 8. Esta √© uma tarefa de pesquisa: voc√™ deve encontrar e executar exemplos em Haskell do uso das seguintes fun√ß√µes dispon√≠veis no Prelude: flip, ord, max, min, curry, uncurry. Para cada uma destas fun√ß√µes voc√™ dever√° encontrar, executar e testar no m√≠nimo dois exemplos.

main = do
  putStrLn $ "Func1: entrada:5; resultado:" ++ show (fatorialn 3)
  putStrLn $ "Func2: entrada:[5,-2,11]; resultado:" ++ show (quadradoReal [5,-2,11])
  putStrLn $ "Func3: entrada:['andre','haskell','hello world','teste']; resultado:" ++ show (comprimentoPalavras ["andre","haskell","hello world","teste"])
  putStrLn $ "Func4: entrada:; resultado:" ++ show maiorMultiploDe29
  putStrLn $ "Func5: entrada:12; resultado:" ++ show (maiorMultiploDe 12)
  putStrLn $ "Func6: entrada:5; resultado:" ++ show (somaQuadrados 5)
  putStrLn $ "Func7: entrada:[2,2,2,2]; resultado:" ++ show (comprimento [2,2,2,2])
  
